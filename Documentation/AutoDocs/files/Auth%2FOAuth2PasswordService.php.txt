<?php
/*
 * LearningStudio RESTful API Libraries 
 * These libraries make it easier to use the LearningStudio Course APIs.
 * Full Documentation is provided with the library. 
 * 
 * Need Help or Have Questions? 
 * Please use the PDN Developer Community at https://community.pdn.pearson.com
 *
 * @category   LearningStudio Course APIs
 * @author     Wes Williams <wes.williams@pearson.com>
 * @author     Pearson Developer Services Team <apisupport@pearson.com>
 * @copyright  2014 Pearson Education Inc.
 * @license    http://www.apache.org/licenses/LICENSE-2.0  Apache 2.0
 * @version    1.0
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Auth;

use Auth\Request as OAuth2Request;
use CryptLib;

/**
 * Auth Service API
 * Class which exposes method to generate OAuth 2 Password Service request
 * @author: Pradeep Patro <pradeep.patro@happiestminds.com>
 * @version: v1.0
 * @copyright: Pearson 2014
 * @package: Auth
 * @since: 12th Jun 2014
 */
class OAuth2PasswordService {
  CONST API_DOMAIN = "https://api.learningstudio.com";
  public $configuration;
  public $oAuthVariables = array();
  private $grantType = "password";
  private $assertionType = "urn:ecollege:names:moauth:1.0:assertion";

  /**
   * Constructor to create an object of OAuth2PasswordService
   * @access public
   * @param object $configuration an object of @see OAuth2PasswordConfig is passed as an input parameter.
   */
  public function __construct ($configuration) {
    $this->configuration = $configuration;
  }

  /**
   * Method which generate the OAuth 2 Password request
   * @access public
   * @param string $userName username for the request
   * @param string $passWord password for the request
   * @return object returns an object of @see OAuth2Request with populated access token, expiry and other values.
   */
  public function generateOAuth2PasswordRequest ($userName, $passWord) {
    $grantType = "password";
    $application_id = $this->configuration->getApplicationId();
    $client_string = $this->configuration->getClientString();
    $url = self::API_DOMAIN . "/token";
    // Create POST request body
    $post_request = http_build_query(array('grant_type' => $grantType,
        'client_id' => $application_id,
        'username' => $client_string . '\\' . $userName,
        'password' => $passWord
      )
    );

    return self::doRequest($post_request);
  }

  /**
   * Method for refreshing the OAuth2 password request
   * @access public
   * @param object $oauthRequest previous requested configuration
   * @return object returns an object of @see OAuth2Request with populated access token, expiry and other values.
   */
  public function refreshOAuth2PasswordRequest ($oauthRequest) {
    $grantType = "refresh_token";
    $application_id = $this->configuration->getApplicationId();
    $client_string = $this->configuration->getClientString();
    $last_refresh_token = $oauthRequest->getRefreshToken();
    // Create POST request body
    $post_request = http_build_query(array('grant_type' => $grantType,
        'client_id' => $application_id,
        'refresh_token' => $last_refresh_token
      )
    );
    return self::doRequest($post_request);
  }

  /**
   * utility method to make the CURL request
   * @access public
   * @param string $post_request post request data
   * @return object $oauthRequest returns the Access Token, Refresh token and returns the Header
   */
  public function doRequest ($post_request) {
    // Use cURL to make the request
    $url = self::API_DOMAIN . "/token";
    
    $httpRequestObject = curl_init();
    $httpResponseObject = NULL;
    curl_setopt($httpRequestObject, CURLOPT_URL, $url);
    curl_setopt($httpRequestObject, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($httpRequestObject, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($httpRequestObject, CURLOPT_POSTFIELDS, $post_request);
    curl_setopt($httpRequestObject, CURLOPT_SSL_VERIFYPEER, false);

    try {
      // Execute & get variables
      $httpResponseObject = curl_exec($httpRequestObject);
      if (!$httpResponseObject) {
        $curlError = curl_error($httpRequestObject);
        if ($curlError) {
          throw new \Exception("There was a problem making the API Call. cURL problem: $curlError");
        }
      }
      $http_code = curl_getinfo($httpRequestObject, CURLINFO_HTTP_CODE);

      if (intval($http_code / 100) >= 4) {
        $decoded = json_decode($httpResponseObject);
        $msg = (is_object($decoded) && isset($decoded->error->message)) ? $decoded->error->message : "No message reported.";
        $msg .= " Error ID: ";
        $msg .= (is_object($decoded) && isset($decoded->error->errorId) && !empty($decoded->error->errorId)) ? $decoded->error->errorId : 'None provided';
        throw new \Exception("The API Server responded with ".$http_code.". Message was: $msg");
        // Else you have a successful response.
      } else {
        $decoded_response = json_decode($httpResponseObject);
        $access_token = $decoded_response->access_token;
        $refresh_token = $decoded_response->refresh_token;
        $expires_in = $decoded_response->expires_in; // seconds
      }
    } catch (\Exception $e) {
      throw new \Exception ($e->getMessage());
    }
    if ($httpResponseObject != NULL) {
      curl_close($httpRequestObject);
    }
    $oauthRequest = new OAuth2Request\OAuth2Request();
    $oauthRequest->setAccessToken($access_token);
    $oauthRequest->setRefreshToken($refresh_token);
    $oauthRequest->setExpiresInSeconds($expires_in);
    $creationTime = time();
    $oauthRequest->setCreationTime($creationTime);
    $oauth_http_header = "X-Authorization: Access_Token access_token=" . $access_token;
    $oauthRequest->setHeaders($oauth_http_header);
    return $oauthRequest;
  }
}

